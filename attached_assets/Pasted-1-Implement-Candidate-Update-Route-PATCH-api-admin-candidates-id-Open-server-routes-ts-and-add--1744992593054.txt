1. Implement Candidate Update Route (PATCH /api/admin/candidates/:id)
Open server/routes.ts and add a new PATCH endpoint for updating candidate details. Place it alongside the other candidate routes (e.g., right before the delete candidate route):
ts
Copy
// Update an existing candidateâ€™s details
app.patch("/api/admin/candidates/:id", isAdmin, async (req, res) => {
    try {
      const candidateId = parseInt(req.params.id);
      if (isNaN(candidateId)) {
        return res.status(400).json({ message: "Invalid candidate ID" });
      }

      // Fetch the candidate to update
      const existingCandidate = await storage.getUser(candidateId);
      if (!existingCandidate) {
        return res.status(404).json({ message: "Candidate not found" });
      }
      if (existingCandidate.role !== "candidate") {
        return res.status(403).json({ message: "Can only update candidate accounts" });
      }

      // Prepare updated fields, keeping current values for any unspecified fields
      const { username, email, fullName, password: newPassword, batchId } = req.body;
      // Enforce required fields are not empty
      if (username && !username.trim()) {
        return res.status(400).json({ message: "Username cannot be empty" });
      }
      if (email && !email.trim()) {
        return res.status(400).json({ message: "Email cannot be empty" });
      }
      if (fullName && !fullName.trim()) {
        return res.status(400).json({ message: "Full name cannot be empty" });
      }

      // Check for uniqueness if username or email are being changed
      if (username && username !== existingCandidate.username) {
        const conflictUser = await storage.getUserByUsername(username);
        if (conflictUser && conflictUser.id !== candidateId) {
          return res.status(400).json({ message: "Username already exists" });
        }
      }
      if (email && email !== existingCandidate.email) {
        const conflictEmailUser = await storage.getUserByEmail(email);
        if (conflictEmailUser && conflictEmailUser.id !== candidateId) {
          return res.status(400).json({ message: "Email already exists" });
        }
      }

      // Hash the password if a new one is provided
      let hashedPassword: string | undefined;
      if (newPassword && newPassword.trim()) {
        hashedPassword = await hashPassword(newPassword);
      }

      // Build the update object, keeping existing values for fields not provided
      const updatedData = {
        username: username?.trim() ?? existingCandidate.username,
        email: email?.trim() ?? existingCandidate.email,
        fullName: fullName?.trim() ?? existingCandidate.fullName,
        password: hashedPassword ?? existingCandidate.password,
        batchId: batchId !== undefined ? batchId : existingCandidate.batchId,
        role: existingCandidate.role  // ensure role remains unchanged
      };

      const updatedUser = await storage.updateUser(candidateId, updatedData);
      // Exclude password before sending back response
      const { password, ...userWithoutPassword } = updatedUser;
      return res.json(userWithoutPassword);
    } catch (error) {
      console.error("Error updating candidate:", error);
      return res.status(500).json({ message: "Error updating candidate" });
    }
});
This route verifies the candidate exists and is of role "candidate", checks for unique username/email if changed, hashes a new password if provided, and then calls storage.updateUser to save changes. It responds with the updated candidate data (excluding the password).